#!/usr/bin/env bash
# wetmonkey exploitation – Interactive Vulnerability Testing Suite v2.0
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BASE_DIR="$SCRIPT_DIR/../../"
source "$BASE_DIR/core/utils.sh"

# Configuration
VERSION="2.0"
MAX_TIMEOUT=1800  # 30 minutes max

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

show_banner() {
    clear
    echo -e "${RED}"
    echo "╔══════════════════════════════════════════╗"
    echo "║    ⚠️  WetMonkey Vulnerability Tester     ║"
    echo "║         Interactive Mode v2.0           ║"
    echo "╚══════════════════════════════════════════╝"
    echo -e "${NC}"
    echo -e "${RED}🚨 CRITICAL WARNING: AUTHORIZED TESTING ONLY! 🚨${NC}"
    echo -e "${RED}This tool is for authorized penetration testing and security research only.${NC}"
    echo -e "${RED}Unauthorized use against systems you don't own is illegal and unethical.${NC}\n"
}

# Show usage information
show_help() {
    echo "WetMonkey Vulnerability Testing Module v${VERSION}"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help              Show this help message"
    echo "  -u, --url <url>         Target URL (legacy mode)"
    echo "  --script <path>         Custom exploit script (legacy mode)"
    echo "  --quick <url>           Quick vulnerability scan"
    echo ""
    echo "This module provides interactive vulnerability testing for web applications."
    echo "Supported tests: SQL injection, XSS, command injection, file inclusion"
    echo ""
    echo "Example:"
    echo "  $0                      # Run in interactive mode"
    echo "  $0 -h                   # Show this help"
    echo "  $0 --quick http://target.com/page.php?id=1  # Quick scan"
    echo "  $0 -u http://target.com/login.php  # Legacy mode"
    echo ""
    echo "⚠️  CRITICAL: This tool is for AUTHORIZED testing only!"
    echo "    Only use on systems you own or have explicit written permission to test."
    echo "    Unauthorized vulnerability testing is illegal in most jurisdictions."
}

# Simple interactive input function
simple_input() {
    local prompt="$1"
    local default="${2:-}"
    local input

    if [ -n "$default" ]; then
        echo -ne "${BLUE}$prompt [${YELLOW}$default${BLUE}]: ${NC}" >&2
    else
        echo -ne "${BLUE}$prompt: ${NC}" >&2
    fi

    read -r input
    echo "${input:-$default}"
}

# Simple yes/no function
ask_yes_no() {
    local prompt="$1"
    local default="${2:-n}"
    local response

    while true; do
        if [ "$default" = "y" ]; then
            echo -ne "${BLUE}$prompt [Y/n]: ${NC}" >&2
        else
            echo -ne "${BLUE}$prompt [y/N]: ${NC}" >&2
        fi

        read -r response
        response="${response:-$default}"

        case "$response" in
            [Yy]|[Yy][Ee][Ss]) return 0 ;;
            [Nn]|[Nn][Oo]) return 1 ;;
            *) echo -e "${RED}Please answer yes or no.${NC}" >&2 ;;
        esac
    done
}

# Function to validate URL
validate_url() {
    local url="$1"
    if [[ $url =~ ^https?://[a-zA-Z0-9.-]+([:/][^[:space:]]*)?$ ]]; then
        return 0
    fi
    return 1
}

# Function to check if URL is reachable
check_url_reachable() {
    local url="$1"
    echo -e "${YELLOW}Testing connectivity to $url...${NC}" >&2

    if curl -s --connect-timeout 10 --max-time 15 -I "$url" >/dev/null 2>&1; then
        echo -e "${GREEN}✓ Target is reachable${NC}" >&2
        return 0
    else
        echo -e "${YELLOW}⚠ Target may not be reachable (continuing anyway)${NC}" >&2
        return 0  # Don't fail, just warn
    fi
}

# Function to get authorization confirmation
get_authorization_confirmation() {
    local target="$1"

    echo -e "${RED}🚨 AUTHORIZATION CONFIRMATION REQUIRED 🚨${NC}"
    echo -e "${BLUE}═══════════════════════════════════════${NC}"
    echo -e "${YELLOW}Target: $target${NC}"
    echo -e "${BLUE}═══════════════════════════════════════${NC}"
    echo -e "${RED}Before proceeding, you must confirm that you have EXPLICIT AUTHORIZATION${NC}"
    echo -e "${RED}to perform vulnerability testing against this target.${NC}\n"

    echo -e "${YELLOW}Legal Requirements:${NC}"
    echo -e "• You own the target system, OR"
    echo -e "• You have written permission from the system owner, OR"
    echo -e "• You are conducting authorized penetration testing with proper scope\n"

    echo -e "${RED}Unauthorized vulnerability testing is illegal and may result in:${NC}"
    echo -e "• Criminal charges under computer crime laws"
    echo -e "• Civil liability for damages"
    echo -e "• Professional consequences"
    echo -e "• Academic disciplinary action\n"

    if ! ask_yes_no "Do you have EXPLICIT AUTHORIZATION to test this target?" "n"; then
        echo -e "${RED}❌ Testing cancelled. Only test systems you are authorized to test.${NC}"
        return 1
    fi

    if ! ask_yes_no "Do you understand the legal and ethical implications?" "n"; then
        echo -e "${RED}❌ Testing cancelled. Please understand the legal implications first.${NC}"
        return 1
    fi

    echo -e "${GREEN}✓ Authorization confirmed. Proceeding with testing...${NC}\n"
    return 0
}

# Function to test for SQL injection vulnerabilities
test_sql_injection() {
    local url="$1"
    local test_level="${2:-1}"

    echo -e "\n${GREEN}🔍 Testing for SQL Injection vulnerabilities...${NC}"
    echo -e "${BLUE}═══════════════════════════════════════${NC}"
    echo -e "${YELLOW}Target: $url${NC}"
    echo -e "${YELLOW}Test Level: $test_level (1=basic, 2=moderate, 3=aggressive)${NC}"
    echo -e "${BLUE}═══════════════════════════════════════${NC}\n"

    if command -v sqlmap &> /dev/null; then
        echo -e "${CYAN}Using sqlmap for SQL injection testing...${NC}"

        local sqlmap_args=("-u" "$url" "--batch" "--level=$test_level")

        # Add risk level based on test level
        case "$test_level" in
            "1") sqlmap_args+=("--risk=1") ;;
            "2") sqlmap_args+=("--risk=2") ;;
            "3") sqlmap_args+=("--risk=3") ;;
        esac

        # Run sqlmap with timeout
        local sqlmap_output
        if sqlmap_output=$(timeout 600 sqlmap "${sqlmap_args[@]}" 2>&1); then
            if [[ $sqlmap_output == *"vulnerable"* ]] || [[ $sqlmap_output == *"injectable"* ]]; then
                echo -e "${RED}🚨 SQL INJECTION VULNERABILITY DETECTED!${NC}"
                echo -e "${YELLOW}sqlmap findings:${NC}"
                echo "$sqlmap_output" | grep -E "(vulnerable|injectable|Parameter|Type|Title)" | head -10
                return 0
            else
                echo -e "${GREEN}✓ No SQL injection vulnerabilities detected${NC}"
                return 1
            fi
        else
            echo -e "${YELLOW}⚠ sqlmap test timed out or failed${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}⚠ sqlmap not available, performing basic SQL injection tests${NC}"

        # Basic manual SQL injection tests
        local payloads=("'" "\"" "1' OR '1'='1" "1\" OR \"1\"=\"1" "1; DROP TABLE users--")
        local vulnerable=false

        for payload in "${payloads[@]}"; do
            local test_url="${url}${payload}"
            echo -e "${CYAN}Testing payload: $payload${NC}"

            local response
            if response=$(curl -s --connect-timeout 5 --max-time 10 "$test_url" 2>/dev/null); then
                if [[ $response == *"SQL"* ]] || [[ $response == *"mysql"* ]] || [[ $response == *"error"* ]]; then
                    echo -e "${RED}⚠ Potential SQL injection detected with payload: $payload${NC}"
                    vulnerable=true
                fi
            fi
        done

        if [ "$vulnerable" = true ]; then
            echo -e "${RED}🚨 POTENTIAL SQL INJECTION VULNERABILITY!${NC}"
            echo -e "${YELLOW}Manual testing detected possible SQL injection. Use sqlmap for detailed analysis.${NC}"
            return 0
        else
            echo -e "${GREEN}✓ No obvious SQL injection vulnerabilities detected${NC}"
            return 1
        fi
    fi
}

# Function to test for XSS vulnerabilities
test_xss_vulnerabilities() {
    local url="$1"

    echo -e "\n${GREEN}🔍 Testing for Cross-Site Scripting (XSS) vulnerabilities...${NC}"
    echo -e "${BLUE}═══════════════════════════════════════${NC}"
    echo -e "${YELLOW}Target: $url${NC}"
    echo -e "${BLUE}═══════════════════════════════════════${NC}\n"

    local xss_payloads=(
        "<script>alert('XSS')</script>"
        "<img src=x onerror=alert('XSS')>"
        "javascript:alert('XSS')"
        "<svg onload=alert('XSS')>"
        "'\"><script>alert('XSS')</script>"
    )

    local vulnerable=false

    for payload in "${xss_payloads[@]}"; do
        echo -e "${CYAN}Testing XSS payload: ${payload:0:30}...${NC}"

        # URL encode the payload
        local encoded_payload
        encoded_payload=$(printf '%s' "$payload" | sed 's/ /%20/g; s/</%3C/g; s/>/%3E/g; s/"/%22/g; s/'\''/%27/g')

        local test_url="${url}${encoded_payload}"
        local response

        if response=$(curl -s --connect-timeout 5 --max-time 10 "$test_url" 2>/dev/null); then
            # Check if payload is reflected in response
            if [[ $response == *"$payload"* ]] || [[ $response == *"<script>"* ]] || [[ $response == *"alert("* ]]; then
                echo -e "${RED}⚠ Potential XSS vulnerability detected with payload${NC}"
                vulnerable=true
            fi
        fi
    done

    if [ "$vulnerable" = true ]; then
        echo -e "${RED}🚨 POTENTIAL XSS VULNERABILITY DETECTED!${NC}"
        echo -e "${YELLOW}Recommendation: Implement proper input validation and output encoding.${NC}"
        return 0
    else
        echo -e "${GREEN}✓ No obvious XSS vulnerabilities detected${NC}"
        return 1
    fi
}

# Function to test for command injection vulnerabilities
test_command_injection() {
    local url="$1"

    echo -e "\n${GREEN}🔍 Testing for Command Injection vulnerabilities...${NC}"
    echo -e "${BLUE}═══════════════════════════════════════${NC}"
    echo -e "${YELLOW}Target: $url${NC}"
    echo -e "${BLUE}═══════════════════════════════════════${NC}\n"

    local cmd_payloads=(
        "; ls"
        "| whoami"
        "&& id"
        "; cat /etc/passwd"
        "| ping -c 1 127.0.0.1"
    )

    local vulnerable=false

    for payload in "${cmd_payloads[@]}"; do
        echo -e "${CYAN}Testing command injection payload: $payload${NC}"

        local test_url="${url}${payload}"
        local response

        if response=$(curl -s --connect-timeout 5 --max-time 10 "$test_url" 2>/dev/null); then
            # Check for command execution indicators
            if [[ $response == *"root:"* ]] || [[ $response == *"uid="* ]] || [[ $response == *"PING"* ]]; then
                echo -e "${RED}⚠ Potential command injection detected with payload: $payload${NC}"
                vulnerable=true
            fi
        fi
    done

    if [ "$vulnerable" = true ]; then
        echo -e "${RED}🚨 POTENTIAL COMMAND INJECTION VULNERABILITY!${NC}"
        echo -e "${YELLOW}Recommendation: Implement proper input validation and avoid system calls.${NC}"
        return 0
    else
        echo -e "${GREEN}✓ No obvious command injection vulnerabilities detected${NC}"
        return 1
    fi
}

# Function to test for file inclusion vulnerabilities
test_file_inclusion() {
    local url="$1"

    echo -e "\n${GREEN}🔍 Testing for File Inclusion vulnerabilities...${NC}"
    echo -e "${BLUE}═══════════════════════════════════════${NC}"
    echo -e "${YELLOW}Target: $url${NC}"
    echo -e "${BLUE}═══════════════════════════════════════${NC}\n"

    local lfi_payloads=(
        "../../../etc/passwd"
        "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts"
        "....//....//....//etc/passwd"
        "/etc/passwd"
        "php://filter/read=convert.base64-encode/resource=index.php"
    )

    local vulnerable=false

    for payload in "${lfi_payloads[@]}"; do
        echo -e "${CYAN}Testing LFI payload: ${payload:0:40}...${NC}"

        local test_url="${url}${payload}"
        local response

        if response=$(curl -s --connect-timeout 5 --max-time 10 "$test_url" 2>/dev/null); then
            # Check for file inclusion indicators
            if [[ $response == *"root:"* ]] || [[ $response == *"localhost"* ]] || [[ $response == *"<?php"* ]]; then
                echo -e "${RED}⚠ Potential file inclusion detected with payload: $payload${NC}"
                vulnerable=true
            fi
        fi
    done

    if [ "$vulnerable" = true ]; then
        echo -e "${RED}🚨 POTENTIAL FILE INCLUSION VULNERABILITY!${NC}"
        echo -e "${YELLOW}Recommendation: Implement proper input validation and file path restrictions.${NC}"
        return 0
    else
        echo -e "${GREEN}✓ No obvious file inclusion vulnerabilities detected${NC}"
        return 1
    fi
}

# Function to perform comprehensive vulnerability testing
comprehensive_vulnerability_test() {
    local url="$1"
    local test_level="${2:-1}"
    local vulnerabilities_found=0
    local tests_performed=0

    echo -e "\n${GREEN}🔍 Starting comprehensive vulnerability testing...${NC}"
    echo -e "${BLUE}═══════════════════════════════════════${NC}"
    echo -e "${YELLOW}Target URL: $url${NC}"
    echo -e "${YELLOW}Test Level: $test_level${NC}"
    echo -e "${BLUE}═══════════════════════════════════════${NC}\n"

    # Test SQL Injection
    ((tests_performed++))
    if test_sql_injection "$url" "$test_level"; then
        ((vulnerabilities_found++))
    fi

    # Test XSS
    ((tests_performed++))
    if test_xss_vulnerabilities "$url"; then
        ((vulnerabilities_found++))
    fi

    # Test Command Injection
    ((tests_performed++))
    if test_command_injection "$url"; then
        ((vulnerabilities_found++))
    fi

    # Test File Inclusion
    ((tests_performed++))
    if test_file_inclusion "$url"; then
        ((vulnerabilities_found++))
    fi

    # Summary
    echo -e "\n${BLUE}═══════════════════════════════════════${NC}"
    echo -e "${GREEN}📊 Vulnerability Testing Summary${NC}"
    echo -e "${BLUE}═══════════════════════════════════════${NC}"
    echo -e "${CYAN}Target tested: $url${NC}"
    echo -e "${CYAN}Tests performed: $tests_performed${NC}"
    echo -e "${CYAN}Vulnerabilities found: $vulnerabilities_found${NC}"

    if [ $vulnerabilities_found -gt 0 ]; then
        echo -e "${RED}🚨 VULNERABILITIES DETECTED!${NC}"
        echo -e "${YELLOW}Immediate Actions Required:${NC}"
        echo -e "• Review and fix identified vulnerabilities"
        echo -e "• Implement proper input validation"
        echo -e "• Use parameterized queries for database access"
        echo -e "• Implement output encoding for user data"
        echo -e "• Conduct thorough security code review"
        echo -e "• Consider professional penetration testing"
    else
        echo -e "${GREEN}✅ NO OBVIOUS VULNERABILITIES DETECTED${NC}"
        echo -e "${GREEN}The target appears to be secure against basic vulnerability tests.${NC}"
        echo -e "${YELLOW}Note: This does not guarantee complete security. Consider:${NC}"
        echo -e "• Professional penetration testing"
        echo -e "• Code security review"
        echo -e "• Regular security assessments"
    fi

    echo -e "${BLUE}═══════════════════════════════════════${NC}"

    return $vulnerabilities_found
}

# Educational information function
show_educational_info() {
    clear
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════════╗"
    echo "║         📚 Web Vulnerability Guide       ║"
    echo "╚══════════════════════════════════════════╝"
    echo -e "${NC}\n"

    echo -e "${GREEN}Common Web Application Vulnerabilities${NC}"
    echo -e "${BLUE}═══════════════════════════════════════${NC}\n"

    echo -e "${YELLOW}1. SQL Injection (SQLi)${NC}"
    echo -e "${BLUE}───────────────────────${NC}"
    echo -e "• ${RED}Risk:${NC} Critical - Can lead to data breach, data manipulation"
    echo -e "• ${CYAN}Description:${NC} Malicious SQL code inserted into application queries"
    echo -e "• ${GREEN}Prevention:${NC} Use parameterized queries, input validation"
    echo -e "• ${YELLOW}Example:${NC} ' OR '1'='1' -- (bypasses authentication)\n"

    echo -e "${YELLOW}2. Cross-Site Scripting (XSS)${NC}"
    echo -e "${BLUE}──────────────────────────────${NC}"
    echo -e "• ${RED}Risk:${NC} High - Session hijacking, defacement, malware"
    echo -e "• ${CYAN}Description:${NC} Malicious scripts executed in user browsers"
    echo -e "• ${GREEN}Prevention:${NC} Output encoding, Content Security Policy"
    echo -e "• ${YELLOW}Example:${NC} <script>alert('XSS')</script>\n"

    echo -e "${YELLOW}3. Command Injection${NC}"
    echo -e "${BLUE}──────────────────${NC}"
    echo -e "• ${RED}Risk:${NC} Critical - Remote code execution, system compromise"
    echo -e "• ${CYAN}Description:${NC} OS commands executed through application"
    echo -e "• ${GREEN}Prevention:${NC} Input validation, avoid system calls"
    echo -e "• ${YELLOW}Example:${NC} ; rm -rf / (destructive command)\n"

    echo -e "${YELLOW}4. File Inclusion${NC}"
    echo -e "${BLUE}─────────────────${NC}"
    echo -e "• ${RED}Risk:${NC} High - Information disclosure, code execution"
    echo -e "• ${CYAN}Description:${NC} Unauthorized file access through application"
    echo -e "• ${GREEN}Prevention:${NC} Path validation, file access restrictions"
    echo -e "• ${YELLOW}Example:${NC} ../../../etc/passwd (directory traversal)\n"

    echo -e "${GREEN}Testing Methodology${NC}"
    echo -e "${BLUE}═══════════════════════════════════════${NC}"
    echo -e "${CYAN}1. Reconnaissance:${NC} Gather information about target"
    echo -e "${CYAN}2. Vulnerability Scanning:${NC} Automated and manual testing"
    echo -e "${CYAN}3. Exploitation:${NC} Attempt to exploit identified vulnerabilities"
    echo -e "${CYAN}4. Post-Exploitation:${NC} Assess impact and document findings"
    echo -e "${CYAN}5. Reporting:${NC} Provide detailed findings and remediation\n"

    echo -e "${GREEN}Legal and Ethical Guidelines${NC}"
    echo -e "${BLUE}═══════════════════════════════════════${NC}"
    echo -e "${RED}⚠ CRITICAL REQUIREMENTS:${NC}"
    echo -e "• ${RED}Authorization:${NC} Only test systems you own or have permission"
    echo -e "• ${RED}Scope:${NC} Stay within defined testing boundaries"
    echo -e "• ${RED}Documentation:${NC} Keep detailed records of all activities"
    echo -e "• ${RED}Disclosure:${NC} Report findings responsibly to system owners"
    echo -e "• ${RED}No Damage:${NC} Avoid causing harm or disruption to systems\n"

    echo -e "${GREEN}Professional Standards${NC}"
    echo -e "${BLUE}═══════════════════════════════════════${NC}"
    echo -e "• Follow industry frameworks (OWASP, NIST, PTES)"
    echo -e "• Maintain confidentiality of client information"
    echo -e "• Provide actionable remediation guidance"
    echo -e "• Stay updated with latest vulnerability research"
    echo -e "• Continuous learning and certification maintenance\n"
}

# Main interactive function
interactive_mode() {
    while true; do
        show_banner

        echo -e "${GREEN}Welcome to WetMonkey Vulnerability Tester!${NC}"
        echo -e "${YELLOW}This tool helps identify common web application vulnerabilities.${NC}\n"

        # Step 1: Test type selection
        echo -e "${GREEN}Step 1: Test Type${NC}"
        echo -e "Choose the type of vulnerability test:"
        echo -e "  ${YELLOW}1)${NC} Single URL Test - Test one URL for multiple vulnerabilities"
        echo -e "  ${YELLOW}2)${NC} Custom Vulnerability Test - Test specific vulnerability types"
        echo -e "  ${YELLOW}3)${NC} Educational Information - Learn about web vulnerabilities"

        local test_type
        while true; do
            choice=$(simple_input "Select test type (1-3)")
            case "$choice" in
                "1") test_type="single"; break ;;
                "2") test_type="custom"; break ;;
                "3") test_type="educational"; break ;;
                *) echo -e "${RED}Please select a number between 1-3${NC}" ;;
            esac
        done

        case "$test_type" in
            "single")
                # Single URL comprehensive test
                echo -e "\n${GREEN}Step 2: Target URL${NC}"
                echo -e "Enter the URL you want to test for vulnerabilities"
                echo -e "${YELLOW}Example: http://target.com/page.php?id=1${NC}"

                local url
                while true; do
                    url=$(simple_input "Target URL")
                    if [ -z "$url" ]; then
                        echo -e "${RED}URL is required!${NC}"
                        continue
                    fi

                    if validate_url "$url"; then
                        break
                    else
                        echo -e "${RED}Please enter a valid URL (http:// or https://)${NC}"
                    fi
                done

                # Authorization confirmation
                if ! get_authorization_confirmation "$url"; then
                    continue
                fi

                # Check connectivity
                check_url_reachable "$url"

                # Step 3: Test level selection
                echo -e "\n${GREEN}Step 3: Test Level${NC}"
                echo -e "Choose the intensity of vulnerability testing:"
                echo -e "  ${YELLOW}1)${NC} Basic - Quick, non-intrusive tests"
                echo -e "  ${YELLOW}2)${NC} Moderate - More thorough testing"
                echo -e "  ${YELLOW}3)${NC} Aggressive - Comprehensive testing (may be detected)"

                local test_level
                while true; do
                    choice=$(simple_input "Select test level (1-3)" "1")
                    case "$choice" in
                        "1"|"2"|"3") test_level="$choice"; break ;;
                        *) echo -e "${RED}Please select 1, 2, or 3${NC}" ;;
                    esac
                done

                # Step 4: Execute comprehensive test
                echo -e "\n${GREEN}Step 4: Vulnerability Testing${NC}"

                if ask_yes_no "Start comprehensive vulnerability testing?" "y"; then
                    echo -e "\n${CYAN}Starting vulnerability tests...${NC}"

                    # Log start
                    log_json "exploitation_start" "url=$url test_level=$test_level mode=comprehensive" 2>/dev/null || true

                    # Perform comprehensive test
                    comprehensive_vulnerability_test "$url" "$test_level"
                    local test_result=$?

                    # Log end
                    log_json "exploitation_end" "url=$url vulnerabilities=$test_result" 2>/dev/null || true
                else
                    echo -e "${YELLOW}Test cancelled.${NC}"
                fi
                ;;

            "custom")
                # Custom vulnerability test
                echo -e "\n${GREEN}Step 2: Target URL${NC}"

                local url
                while true; do
                    url=$(simple_input "Target URL")
                    if [ -z "$url" ]; then
                        echo -e "${RED}URL is required!${NC}"
                        continue
                    fi

                    if validate_url "$url"; then
                        break
                    else
                        echo -e "${RED}Please enter a valid URL (http:// or https://)${NC}"
                    fi
                done

                # Authorization confirmation
                if ! get_authorization_confirmation "$url"; then
                    continue
                fi

                # Step 3: Vulnerability type selection
                echo -e "\n${GREEN}Step 3: Vulnerability Type${NC}"
                echo -e "Choose the specific vulnerability to test:"
                echo -e "  ${YELLOW}1)${NC} SQL Injection"
                echo -e "  ${YELLOW}2)${NC} Cross-Site Scripting (XSS)"
                echo -e "  ${YELLOW}3)${NC} Command Injection"
                echo -e "  ${YELLOW}4)${NC} File Inclusion"

                local vuln_type
                while true; do
                    choice=$(simple_input "Select vulnerability type (1-4)")
                    case "$choice" in
                        "1") vuln_type="sql"; break ;;
                        "2") vuln_type="xss"; break ;;
                        "3") vuln_type="cmd"; break ;;
                        "4") vuln_type="lfi"; break ;;
                        *) echo -e "${RED}Please select a number between 1-4${NC}" ;;
                    esac
                done

                # Step 4: Execute specific test
                echo -e "\n${GREEN}Step 4: Vulnerability Testing${NC}"

                if ask_yes_no "Start specific vulnerability test?" "y"; then
                    echo -e "\n${CYAN}Starting vulnerability test...${NC}"

                    # Log start
                    log_json "exploitation_start" "url=$url vuln_type=$vuln_type mode=custom" 2>/dev/null || true

                    # Perform specific test
                    local vulnerable=0
                    case "$vuln_type" in
                        "sql")
                            if test_sql_injection "$url" "1"; then
                                vulnerable=1
                            fi
                            ;;
                        "xss")
                            if test_xss_vulnerabilities "$url"; then
                                vulnerable=1
                            fi
                            ;;
                        "cmd")
                            if test_command_injection "$url"; then
                                vulnerable=1
                            fi
                            ;;
                        "lfi")
                            if test_file_inclusion "$url"; then
                                vulnerable=1
                            fi
                            ;;
                    esac

                    # Log end
                    log_json "exploitation_end" "url=$url vuln_type=$vuln_type vulnerable=$vulnerable" 2>/dev/null || true
                else
                    echo -e "${YELLOW}Test cancelled.${NC}"
                fi
                ;;

            "educational")
                # Show educational information
                show_educational_info
                echo -e "\n${YELLOW}Press Enter to continue...${NC}"
                read -r
                ;;
        esac

        echo -e "\n${YELLOW}Press Enter to continue...${NC}"
        read -r

        if ! ask_yes_no "Perform another test?" "y"; then
            break
        fi
    done
}

# Legacy mode function
legacy_mode() {
    local url="$1"
    local script="${2:-}"

    echo -e "${YELLOW}Running in legacy mode...${NC}"
    echo -e "${RED}⚠ WARNING: Only test URLs you own or have permission to test!${NC}\n"

    # Validate URL
    if ! validate_url "$url"; then
        echo -e "${RED}Error: Invalid URL format${NC}" >&2
        exit 1
    fi

    # Authorization check
    if ! get_authorization_confirmation "$url"; then
        exit 1
    fi

    # Log start
    log_json "exploitation_start" "url=$url script=$script mode=legacy" 2>/dev/null || true

    if [ -n "$script" ]; then
        echo -e "${CYAN}Running custom exploit script: $script${NC}"
        if [ -f "$script" ]; then
            if [[ $script == *.py ]]; then
                python3 "$script" "$url"
            else
                bash "$script" "$url"
            fi
        else
            echo -e "${RED}Error: Script file not found: $script${NC}" >&2
            exit 1
        fi
    else
        echo -e "${CYAN}Running basic vulnerability tests...${NC}"
        comprehensive_vulnerability_test "$url" "1"
        local test_result=$?

        # Log end
        log_json "exploitation_end" "url=$url vulnerabilities=$test_result" 2>/dev/null || true

        exit $test_result
    fi
}

# Main function
main() {
    local url=""
    local script=""
    local quick_url=""

    # Parse command line arguments
    if [[ $# -gt 0 ]]; then
        while [[ $# -gt 0 ]]; do
            case "$1" in
                -h|--help)
                    show_help
                    exit 0
                    ;;
                -u|--url)
                    if [ -z "${2:-}" ]; then
                        echo -e "${RED}Error: -u requires a URL${NC}" >&2
                        exit 1
                    fi
                    url="$2"
                    shift 2
                    ;;
                --script)
                    if [ -z "${2:-}" ]; then
                        echo -e "${RED}Error: --script requires a path${NC}" >&2
                        exit 1
                    fi
                    script="$2"
                    shift 2
                    ;;
                --quick)
                    if [ -z "${2:-}" ]; then
                        echo -e "${RED}Error: --quick requires a URL${NC}" >&2
                        exit 1
                    fi
                    quick_url="$2"
                    shift 2
                    ;;
                *)
                    echo -e "${RED}Unknown option: $1${NC}" >&2
                    echo "Use -h for help." >&2
                    exit 1
                    ;;
            esac
        done

        # Handle quick vulnerability test
        if [ -n "$quick_url" ]; then
            echo -e "${GREEN}Quick Vulnerability Test: $quick_url${NC}"

            if ! validate_url "$quick_url"; then
                echo -e "${RED}Error: Invalid URL format${NC}" >&2
                exit 1
            fi

            # Authorization check
            if ! get_authorization_confirmation "$quick_url"; then
                exit 1
            fi

            # Log start
            log_json "exploitation_start" "url=$quick_url mode=quick" 2>/dev/null || true

            # Perform quick test
            comprehensive_vulnerability_test "$quick_url" "1"
            local test_result=$?

            # Log end
            log_json "exploitation_end" "url=$quick_url vulnerabilities=$test_result" 2>/dev/null || true

            exit $test_result
        fi

        # Handle legacy mode
        if [ -n "$url" ]; then
            legacy_mode "$url" "$script"
            exit $?
        fi
    fi

    # Check dependencies for interactive mode
    missing_deps=()
    if ! command -v curl &> /dev/null; then
        missing_deps+=("curl")
    fi

    if [ ${#missing_deps[@]} -gt 0 ]; then
        echo -e "${YELLOW}Warning: Some tools are missing: ${missing_deps[*]}${NC}"
        echo -e "${YELLOW}Some testing features may have reduced functionality.${NC}\n"
    fi

    # Start interactive mode
    interactive_mode
}

# Run the main function with all arguments
main "$@"
